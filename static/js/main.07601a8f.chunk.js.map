{"version":3,"sources":["Components/Navigator2.js","Components/Home.js","Components/Plants.js","Components/Sysinfo.js","serviceWorker.js","index.js","App.js"],"names":["Navigator2","Navbar","collapseOnSelect","expand","bg","variant","className","to","Toggle","aria-controls","Collapse","id","Nav","Home","style","width","images","Plants","useState","plant","setPlant","useEffect","jsonFetch","fetch","then","res","json","data","catch","err","console","error","padding","type","istutuspv","alt","src","imagefile","imagefile2","Sysinfo","Boolean","window","location","hostname","match","ReactDOM","render","path","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8MAwBeA,EAlBI,WACf,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACnD,kBAAC,IAAD,CAAMC,UAAU,eAAeC,GAAG,KAAlC,cACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKN,UAAU,WACf,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAA9B,QACA,kBAAC,IAAD,CAAMD,UAAU,WAAWC,GAAG,WAA9B,sBACA,kBAAC,IAAD,CAAMD,UAAU,WAAWC,GAAG,WAA9B,kB,QCiBLM,EAxBF,WACT,OACI,6BACI,yBAAKC,MAAO,CAACC,MAAO,QAChB,kBAAC,IAAD,CAAoBC,OAAQ,CAC5B,yBACA,0BACA,yBACA,yBACA,yBACA,2BACA,0BACA,wBACA,yBACA,gCACA,+BACA,qC,QCyBDC,EAhDA,WAAM,MAOSC,mBAAS,IAPlB,mBAOVC,EAPU,KAOHC,EAPG,KASjBC,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAY,WACdC,MAAM,qBACLC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAAG,GAAI,OAAIP,EAASO,MACtBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,OAKhC,OACI,6BACI,yBAAKvB,UAAU,WACf,wBAAIQ,MAAO,CAACkB,QAAQ,KAApB,qBACA,yBAAK1B,UAAU,UAEX,yBAAKA,UAAU,UACX,qCAAWa,EAAMR,IACjB,uCAAaQ,EAAMc,MACnB,mDAAmBd,EAAMe,WAC7B,yBAAKC,IAAI,SAASC,IAAKjB,EAAMkB,UAAWtB,MAAM,SAG9C,yBAAKT,UAAU,UACX,4CACA,oDACA,8DACJ,yBAAK6B,IAAI,SAASC,IAAKjB,EAAMmB,WAAYvB,MAAM,aCZhDwB,EA3BC,WAaZ,OACI,6BACI,yBAAKjC,UAAU,WACf,wBAAIQ,MAAO,CAACkB,QAAQ,KAApB,sBACA,yBAAK1B,UAAU,QACX,kDACA,6DACA,4DCVIkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCID,WAEb,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,UAAUC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,UAAUC,UAAW/B,IACjC,kBAAC,IAAD,CAAOgC,OAAK,EAACF,KAAK,IAAIC,UAAWnC,IACjC,kBAAC,IAAD,CAAOiC,OAAQ,kBAAM,sDDdf,MAASI,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,iB","file":"static/js/main.07601a8f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\nimport {Navbar, Nav} from 'react-bootstrap';\r\n\r\nconst Navigator2 = () => {\r\n    return (\r\n        <div>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Link className=\"navbar-brand\" to=\"/\">TinyForest</Link>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                    <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n                    <Link className=\"nav-link\" to=\"/system\">System Information</Link>\r\n                    <Link className=\"nav-link\" to=\"/plants\">My Plants</Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navigator2;","import React from 'react';\r\n//import ModalList from './ModalList';\r\n//import ModalGrid from './ModalGrid';\r\n//import ImageGallery from './ImageGallery';\r\nimport MultipleGridImages from 'react-multiple-image-grid'\r\n\r\n\r\n// TODO fix modallist to display right item\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <div style={{width: '60%'}}>\r\n                <MultipleGridImages images={[\r\n                \"../Photos/kokous1.jpeg\",\r\n                \"../photos/kolvaus1.jpeg\",\r\n                \"../photos/kolvaus2.jpg\",\r\n                \"../photos/kolvaus3.jpg\",\r\n                \"../photos/kolvaus4.jpg\",\r\n                \"../photos/konstaRpi.jpeg\",\r\n                \"../photos/rpiMoist.jpeg\",\r\n                \"../photos/rpiPek.jpeg\",\r\n                \"../photos/rpiTemp.jpeg\",\r\n                \"../photos/valkosipulivk1.jpeg\",\r\n                \"../photos/valkosipulivk2.jpg\",\r\n                \"../photos/valkosipulivk3.jpg\"]}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default Home;","import React, {useState, useEffect} from 'react';\r\n\r\nconst Plants = () => {\r\n\r\n\r\n    // TODO Figure out layout and what information to pull form json\r\n    // Maby add pictures etc.\r\n    // plantinfo.json is a temporary file\r\n\r\n    const [plant, setPlant] = useState([]);\r\n\r\n    useEffect(() => {\r\n        jsonFetch();\r\n    }, [])\r\n\r\n    const jsonFetch = () => {\r\n        fetch('../plantinfo.json')\r\n        .then((res) => res.json())\r\n        .then(data => setPlant(data))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    //console.log(plant.imagefile)\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"wrapper\">\r\n            <h2 style={{padding:10}}>Plant Information</h2>\r\n            <div className=\"plants\">\r\n    \r\n                <div className=\"plant1\">\r\n                    <h6>Nimi: {plant.id}</h6>\r\n                    <h6>Tyyppi: {plant.type}</h6>\r\n                    <h6>Istutusp채iv채: {plant.istutuspv}</h6>\r\n                <img alt=\"Broken\" src={plant.imagefile} width=\"200\" ></img>\r\n                </div>\r\n\r\n                <div className=\"plant2\">\r\n                    <h6>Nimi: Kasvi2</h6>\r\n                    <h6>Tyyppi: Kasvi2Tyyppi</h6>\r\n                    <h6>Istutusp채iv채: Istutuspv2</h6>\r\n                <img alt=\"Broken\" src={plant.imagefile2} width=\"200\" ></img>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Plants;","import React from 'react';\r\n\r\nconst Sysinfo = () => {\r\n\r\n    // TODO Pull system info etc.\r\n\r\n    //const [sysinfo, setSysinfo] = useState([]);\r\n    \r\n    // const jsonFetch = () => {\r\n    //    fetch('../sysinfo.json')\r\n    //    .then((res) => res.json())\r\n    //    .then(data => setSysinfo(data))\r\n    //    .catch(err => console.error(err))\r\n    //}\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"wrapper\">\r\n            <h2 style={{padding:10}}>System Information</h2>\r\n            <div className=\"sys1\">\r\n                <h5>System Information</h5>\r\n                <h6>Temperature: Pull system temp</h6>\r\n                <h6>Kernel: Pull kernel info</h6>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sysinfo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navigator2 from './Components/Navigator2';\nimport './App.css';\nimport Home from './Components/Home';\nimport Plants from './Components/Plants';\nimport Sysinfo from './Components/Sysinfo';\n\n\nexport default function App() {\n  \n  return (\n    <Router>\n      <div>\n        <Navigator2 />\n          <Switch>\n          <Route path=\"/system\" component={Sysinfo}/>\n          <Route path=\"/plants\" component={Plants}/>\n          <Route exact path=\"/\" component={Home}/>\n          <Route render={() => <h1>Page not found</h1>}/>\n        </Switch>\n      </div>\n    </Router>\n    \n  );\n}"],"sourceRoot":""}