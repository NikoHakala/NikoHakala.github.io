{"version":3,"sources":["Components/Navigator2.js","Components/Home.js","Components/Plants.js","Components/Sysinfo.js","serviceWorker.js","index.js","App.js"],"names":["Navigator2","Navbar","collapseOnSelect","expand","bg","variant","className","to","Toggle","aria-controls","Collapse","id","Nav","Home","images","Plants","useState","plant","setPlant","useEffect","jsonFetch","fetch","then","res","json","data","catch","err","console","error","style","padding","type","wpump1","npump1","istutuspv","alt","src","imagefile","width","wpump2","npump2","istutuspv2","imagefile2","Sysinfo","Boolean","window","location","hostname","match","ReactDOM","render","path","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8MAwBeA,EAlBI,WACf,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACnD,kBAAC,IAAD,CAAMC,UAAU,eAAeC,GAAG,KAAlC,cACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKN,UAAU,WACX,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAA9B,QACA,kBAAC,IAAD,CAAMD,UAAU,WAAWC,GAAG,WAA9B,sBACA,kBAAC,IAAD,CAAMD,UAAU,WAAWC,GAAG,WAA9B,kB,QC2BTM,EAlCF,WACT,OACI,yBAAKP,UAAU,gBACX,yBAAKA,UAAU,cACX,kBAAC,IAAD,CAAoBQ,OAAQ,CAC5B,yBACA,0BACA,yBACA,yBACA,yBACA,2BACA,0BACA,wBACA,yBACA,gCACA,+BACA,+BACA,wCAEJ,yBAAKR,UAAU,YACX,0DACA,wKAGA,wJ,QCmBDS,EAjDA,WAAM,MAMSC,mBAAS,IANlB,mBAMVC,EANU,KAMHC,EANG,KAQjBC,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAY,WACdC,MAAM,qBACLC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAAG,GAAI,OAAIP,EAASO,MACtBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,OAKhC,OACI,6BACI,yBAAKrB,UAAU,WACf,wBAAIwB,MAAO,CAACC,QAAQ,KAApB,qBACA,yBAAKzB,UAAU,UACX,yBAAKA,UAAU,UACX,qCAAWW,EAAMN,IACjB,uCAAaM,EAAMe,MACnB,sDAA4Bf,EAAMgB,QAClC,yDAA+BhB,EAAMiB,QACrC,mDAAmBjB,EAAMkB,WAC7B,yBAAKC,IAAI,SAASC,IAAKpB,EAAMqB,UAAWC,MAAM,SAE9C,yBAAKjC,UAAU,UACX,4CACA,oDACA,sDAA4BW,EAAMuB,QAClC,yDAA+BvB,EAAMwB,QACrC,mDAAmBxB,EAAMyB,YAC7B,yBAAKN,IAAI,SAASC,IAAKpB,EAAM0B,WAAYJ,MAAM,aCbhDK,EA5BC,WAaZ,OACI,6BACI,yBAAKtC,UAAU,WACf,wBAAIwB,MAAO,CAACC,QAAQ,KAApB,sBACA,yBAAKzB,UAAU,QACX,kDACA,sDACA,mDACA,0DCXIuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCID,WAEb,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,UAAUC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,UAAUC,UAAWtC,IACjC,kBAAC,IAAD,CAAOuC,OAAK,EAACF,KAAK,IAAIC,UAAWxC,IACjC,kBAAC,IAAD,CAAOsC,OAAQ,kBAAM,sDDdf,MAASI,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,iB","file":"static/js/main.3ff1f09a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\nimport {Navbar, Nav} from 'react-bootstrap';\r\n\r\nconst Navigator2 = () => {\r\n    return (\r\n        <div>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Link className=\"navbar-brand\" to=\"/\">TinyForest</Link>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n                        <Link className=\"nav-link\" to=\"/system\">System Information</Link>\r\n                        <Link className=\"nav-link\" to=\"/plants\">My Plants</Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navigator2;","import React from 'react';\r\n//import ModalList from './ModalList';\r\n//import ModalGrid from './ModalGrid';\r\n//import ImageGallery from './ImageGallery';\r\nimport MultipleGridImages from 'react-multiple-image-grid'\r\n\r\n\r\n// TODO fix modallist to display right item\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"home-wrapper\">\r\n            <div className=\"gridimages\">\r\n                <MultipleGridImages images={[\r\n                \"../Photos/kokous1.jpeg\",\r\n                \"../Photos/kolvaus1.jpeg\",\r\n                \"../Photos/kolvaus2.jpg\",\r\n                \"../Photos/kolvaus3.jpg\",\r\n                \"../Photos/kolvaus4.jpg\",\r\n                \"../Photos/konstaRpi.jpeg\",\r\n                \"../Photos/rpiMoist.jpeg\",\r\n                \"../Photos/rpiPek.jpeg\",\r\n                \"../Photos/rpiTemp.jpeg\",\r\n                \"../Photos/valkosipulivk1.jpeg\",\r\n                \"../Photos/valkosipulivk2.jpg\",\r\n                \"../Photos/valkosipulivk3.jpg\",\r\n                \"../Photos/jarjestelma07112019.jpg\"]}/>\r\n            </div>\r\n            <div className=\"hometext\">\r\n                <h3>Monialaprojekti TinyForest</h3>\r\n                <p>\r\n                    Projektimme tarkoitus on tuottaa järjestelmä joka automatisoi kasvien kasvatusta ja monitoroi lämpötilaa, kosteutta ja valoa. \r\n                </p>\r\n                <p>\r\n                    Projektin osalliset ovat Juska Forelius (Projektipäällikkö), Niko Hakala, Konstantin Gurin ja Pekka Helenius.\r\n                </p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default Home;","import React, {useState, useEffect} from 'react';\r\n\r\n\r\nconst Plants = () => {\r\n\r\n    // TODO Figure out layout and what information to pull form json\r\n    // Maby add pictures etc.\r\n    // plantinfo.json is a temporary file\r\n\r\n    const [plant, setPlant] = useState([]);\r\n\r\n    useEffect(() => {\r\n        jsonFetch();\r\n    }, [])\r\n\r\n    const jsonFetch = () => {\r\n        fetch('../plantinfo.json')\r\n        .then((res) => res.json())\r\n        .then(data => setPlant(data))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    //console.log(plant.imagefile)\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"wrapper\">\r\n            <h2 style={{padding:10}}>Plant Information</h2>\r\n            <div className=\"plants\">\r\n                <div className=\"plant1\">\r\n                    <h5>Nimi: {plant.id}</h5>\r\n                    <h5>Tyyppi: {plant.type}</h5>\r\n                    <h5>Waterpump last online: {plant.wpump1}</h5>\r\n                    <h5>Nutrientpump last online: {plant.npump1}</h5>\r\n                    <h5>Istutuspäivä: {plant.istutuspv}</h5>\r\n                <img alt=\"Broken\" src={plant.imagefile} width=\"200\" ></img>\r\n                </div>\r\n                <div className=\"plant2\">\r\n                    <h5>Nimi: Kasvi2</h5>\r\n                    <h5>Tyyppi: Kasvi2Tyyppi</h5>\r\n                    <h5>Waterpump last online: {plant.wpump2}</h5>\r\n                    <h5>Nutrientpump last online: {plant.npump2}</h5>\r\n                    <h5>Istutuspäivä: {plant.istutuspv2}</h5>\r\n                <img alt=\"Broken\" src={plant.imagefile2} width=\"200\" ></img>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Plants;","import React from 'react';\r\n\r\nconst Sysinfo = () => {\r\n\r\n    // TODO Pull system info etc.\r\n\r\n    //const [sysinfo, setSysinfo] = useState([]);\r\n    \r\n    //const jsonFetch = () => {\r\n    //    fetch('../sysinfo.json')\r\n    //    .then((res) => res.json())\r\n    //    .then(data => setSysinfo(data))\r\n    //    .catch(err => console.error(err))\r\n    //}\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"wrapper\">\r\n            <h2 style={{padding:10}}>System Information</h2>\r\n            <div className=\"sys1\">\r\n                <h4>System Information</h4>\r\n                <h5>Core Temperature: 600c</h5>\r\n                <h5>Kernel: Rab beri bi</h5>\r\n                <h5>Room temperature: 200c</h5>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sysinfo;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Navigator2 from './Components/Navigator2';\r\nimport './App.css';\r\nimport Home from './Components/Home';\r\nimport Plants from './Components/Plants';\r\nimport Sysinfo from './Components/Sysinfo';\r\n\r\n\r\nexport default function App() {\r\n  \r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Navigator2 />\r\n          <Switch>\r\n          <Route path=\"/system\" component={Sysinfo}/>\r\n          <Route path=\"/plants\" component={Plants}/>\r\n          <Route exact path=\"/\" component={Home}/>\r\n          <Route render={() => <h1>Page not found</h1>}/>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n    \r\n  );\r\n}"],"sourceRoot":""}