{"version":3,"sources":["Components/Navigator2.js","Components/Home.js","Components/Plants.js","Components/LogParser.js","Components/Sysinfo.js","serviceWorker.js","index.js","App.js"],"names":["Navigator2","Navbar","collapseOnSelect","expand","bg","variant","className","to","Toggle","aria-controls","Collapse","id","Nav","Home","images","Plants","useState","plant","setPlant","teksti","setTeksti","useEffect","jsonFetch","txtFetch","fetch","then","res","json","data","catch","err","console","error","text","log","style","padding","nimi","type","planting_day","alt","title","short_description","src","imagefile","width","imagefile2","LogParser","sensor","setSensor","systemfile","setSystemfile","jsoncheck","setJsoncheck","fetchSensor","fetchSystemfile","fetchJsoncheck","msg","system_file","json_check","name","description","Sysinfo","moisture","setMoisture","light","setLight","temperature","setTemperature","logs","setLogs","fetchMoisture","fetchLight","fetchTemperature","fetchLogs","sensors","sensor_friendly_name","gpio_pin","Boolean","window","location","hostname","match","ReactDOM","render","path","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9840da2f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\nimport {Navbar, Nav} from 'react-bootstrap';\r\n\r\nconst Navigator2 = () => {\r\n    return (\r\n        <div>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Link className=\"navbar-brand\" to=\"/\">TinyForest</Link>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n                        <Link className=\"nav-link\" to=\"/system\">System Information</Link>\r\n                        <Link className=\"nav-link\" to=\"/plants\">My Plants</Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navigator2;","import React from 'react';\r\n//import ModalList from './ModalList';\r\n//import ModalGrid from './ModalGrid';\r\n//import ImageGallery from './ImageGallery';\r\nimport MultipleGridImages from 'react-multiple-image-grid'\r\n\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"home-wrapper\">\r\n            <div className=\"gridimages\">\r\n                <MultipleGridImages images={[\r\n                \"../Photos/kokous1.jpeg\",\r\n                \"../Photos/kolvaus1.jpeg\",\r\n                \"../Photos/kolvaus2.jpg\",\r\n                \"../Photos/kolvaus3.jpg\",\r\n                \"../Photos/kolvaus4.jpg\",\r\n                \"../Photos/konstaRpi.jpeg\",\r\n                \"../Photos/rpiMoist.jpeg\",\r\n                \"../Photos/rpiPek.jpeg\",\r\n                \"../Photos/rpiTemp.jpeg\",\r\n                \"../Photos/valkosipulivk1.jpeg\",\r\n                \"../Photos/valkosipulivk2.jpg\",\r\n                \"../Photos/valkosipulivk3.jpg\",\r\n                \"../Photos/jarjestelma07112019.jpg\"]}/>\r\n            </div>\r\n            <div className=\"hometext\">\r\n                <h3>Monialaprojekti TinyForest</h3>\r\n                <p>\r\n                    Projektimme tarkoitus on tuottaa järjestelmä joka automatisoi kasvien kasvatusta ja monitoroi lämpötilaa, kosteutta ja valoa. \r\n                </p>\r\n                <p>\r\n                    Projektin osalliset ovat Juska Forelius (Projektipäällikkö), Niko Hakala, Konstantin Gurin ja Pekka Helenius.\r\n                </p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default Home;","import React, {useState, useEffect} from 'react';\r\n\r\nconst Plants = () => {\r\n\r\n    // TODO Figure out layout and what information to pull form json\r\n    // Maby add pictures etc.\r\n    // plantinfo.json is a temporary file\r\n\r\n    const [plant, setPlant] = useState([]);\r\n    const [teksti, setTeksti] = useState('');\r\n\r\n    useEffect(() => {\r\n        jsonFetch();\r\n        txtFetch();\r\n    }, [])\r\n\r\n    const jsonFetch = () => {\r\n        fetch('../plantinfo.json')\r\n        .then((res) => res.json())\r\n        .then(data => setPlant(data.plant))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    const txtFetch = () => {\r\n        fetch('../tekstia.txt')\r\n        .then((res) => res.text())\r\n        .then(data => setTeksti(data))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n\r\n    console.log(teksti)\r\n\r\n    //console.log(plant.imagefile)\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"wrapper\">\r\n            <h2 style={{padding:10}}>Plant Information</h2>\r\n            <div className=\"plants\">\r\n                <div className=\"plant1\">\r\n                    <h5>ID: {plant.id}</h5>\r\n                    <h5>Nimi: {plant.nimi}</h5>\r\n                    <h5>Tyyppi: {plant.type}</h5>\r\n                    <h5>Istutuspäivä: {plant.planting_day}</h5>\r\n                <img alt=\"No_image\" title={plant.short_description} src={plant.imagefile} width=\"200\" ></img>\r\n                </div>\r\n                <div className=\"plant2\">\r\n                    <h5>ID: PL2ID</h5>\r\n                    <h5>Nimi: Kasvi2</h5>\r\n                    <h5>Tyyppi: Kasvi2Tyyppi</h5>\r\n                    <h5>Istutuspäivä: kasvi2ispv</h5>\r\n                <img alt=\"No_image\" src={plant.imagefile2} width=\"200\" ></img>\r\n                </div>  \r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Plants;","import React, { useState, useEffect } from 'react';\r\n\r\nconst LogParser = () => {\r\n\r\n    const [sensor, setSensor] = useState([]);\r\n    const [systemfile, setSystemfile] = useState([]);\r\n    const [jsoncheck, setJsoncheck] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchSensor();\r\n        fetchSystemfile();\r\n        fetchJsoncheck();\r\n    }, [])\r\n\r\n\r\n    const fetchSensor = () => {\r\n        fetch('../tinyforest.log.json')\r\n        .then((res) => res.json())\r\n        .then(data => setSensor(data.sensor.msg))\r\n        .catch(err => console.error(err))\r\n    }\r\n    const fetchSystemfile = () => {\r\n        fetch('../tinyforest.log.json')\r\n        .then((res) => res.json())\r\n        .then(data => setSystemfile(data.system_file.msg))\r\n        .catch(err => console.error(err))\r\n    }\r\n    const fetchJsoncheck = () => {\r\n        fetch('../tinyforest.log.json')\r\n        .then((res) => res.json())\r\n        .then(data => setJsoncheck(data.json_check.msg))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    console.log(sensor)\r\n    console.log(jsoncheck)\r\n    console.log(systemfile)\r\n\r\n    return (\r\n        <div>\r\n            <p>{sensor.name}: {sensor.description}</p>\r\n            <p>{jsoncheck.description}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LogParser;","import React, { useState, useEffect } from 'react';\r\nimport LogParser from './LogParser.js';\r\n\r\nconst Sysinfo = () => {\r\n\r\n    const [moisture, setMoisture] = useState([]);\r\n    const [light, setLight] = useState([]);\r\n    const [temperature, setTemperature] = useState([]);\r\n    const [logs, setLogs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchMoisture();\r\n        fetchLight();\r\n        fetchTemperature();\r\n        fetchLogs();\r\n    }, [])\r\n\r\n    const fetchMoisture = () => {\r\n        fetch('../plantinfo.json')\r\n        .then((res) => res.json())\r\n        .then(data => setMoisture(data.sensors.moisture))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    const fetchLight = () => {\r\n        fetch('../plantinfo.json')\r\n        .then((res) => res.json())\r\n        .then(data => setLight(data.sensors.light))\r\n        .catch(err => console.error(err))\r\n    }\r\n \r\n    const fetchTemperature = () => {\r\n        fetch('../plantinfo.json')\r\n        .then((res) => res.json())\r\n        .then(data => setTemperature(data.sensors.temperature))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    const fetchLogs = () => {\r\n        fetch('../tinyforest.log.json')\r\n        .then((res) => res.json())\r\n        .then(data => setLogs(data))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    console.log(logs)\r\n\r\n    // TODO Pull system info etc.\r\n\r\n    //const [sysinfo, setSysinfo] = useState([]);\r\n    \r\n    //const jsonFetch = () => {\r\n    //    fetch('../sysinfo.json')\r\n    //    .then((res) => res.json())\r\n    //    .then(data => setSysinfo(data))\r\n    //    .catch(err => console.error(err))\r\n    //}\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"wrapperSys\">\r\n            <h2 style={{padding:10}}>System Information</h2>\r\n                <div className=\"sensors\">   \r\n                    <div className=\"sys1\">\r\n                        <h5>Sensor name: {moisture.sensor_friendly_name}</h5>\r\n                        <h5>Moisture: 202020</h5>\r\n                        <h5>Connected to pin: {moisture.gpio_pin}</h5>\r\n                    </div>\r\n                    <div className=\"sys1\">\r\n                        <h5>Sensor name: {light.sensor_friendly_name}</h5>\r\n                        <h5>Light value(dark or light): light</h5>\r\n                        <h5>Connected to pin: {light.gpio_pin}</h5>\r\n                    </div>\r\n                    <div className=\"sys1\">\r\n                        <h5>Sensor name: {temperature.sensor_friendly_name}</h5>\r\n                        <h5>Temperature: 123c</h5> \r\n                        <h5>Connected to pin: {temperature.gpio_pin}</h5>\r\n                    </div>\r\n                    <div className=\"sys1\">\r\n                        <h5>Recent system logs</h5>\r\n                        <LogParser />\r\n                    </div>\r\n                </div> \r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sysinfo;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Navigator2 from './Components/Navigator2';\r\nimport './App.css';\r\nimport Home from './Components/Home';\r\nimport Plants from './Components/Plants';\r\nimport Sysinfo from './Components/Sysinfo';\r\n\r\n\r\nexport default function App() {\r\n  \r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Navigator2 />\r\n          <Switch>\r\n          <Route path=\"/system\" component={Sysinfo}/>\r\n          <Route path=\"/plants\" component={Plants}/>\r\n          <Route exact path=\"/\" component={Home}/>\r\n          <Route render={() => <h1>Page not found</h1>}/>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n    \r\n  );\r\n}"],"sourceRoot":""}